// This file was generated by go-dao-code-gen,
// you can modify it to be more suitable.

package dao

import "github.com/huandu/go-sqlbuilder"

// SvModelConds specifies the conditon fileds of table.
type SvModelConds struct {
	ID        *int64  // 模型id
	Name      *string // 模型名称
	ThumbURL  *string // 模型缩略图
	ModelURL  *string // 模型源文件
	Price     *int64  // 价格
	Brand     *string // 手机品牌 eg:{"iphone":["iphone7"]}
	CreatedAt *int64
	UpdatedAt *int64
	DeletedAt *int64
}

// SvModelCond specifies the closure function of conditions.
type SvModelCond func(*SvModelConds)

// NewSvModelConds return a conds entity by condition functions list.
func NewSvModelConds(conds ...SvModelCond) SvModelConds {
	var o SvModelConds
	for _, cond := range conds {
		cond(&o)
	}
	return o
}

// SetSvModelID return a closure function for condition on the field.
func SetSvModelID(id int64) SvModelCond {
	return func(o *SvModelConds) {
		o.ID = &id
	}
}

// SetSvModelName return a closure function for condition on the field.
func SetSvModelName(name string) SvModelCond {
	return func(o *SvModelConds) {
		o.Name = &name
	}
}

// SetSvModelThumbURL return a closure function for condition on the field.
func SetSvModelThumbURL(thumbURL string) SvModelCond {
	return func(o *SvModelConds) {
		o.ThumbURL = &thumbURL
	}
}

// SetSvModelModelURL return a closure function for condition on the field.
func SetSvModelModelURL(modelURL string) SvModelCond {
	return func(o *SvModelConds) {
		o.ModelURL = &modelURL
	}
}

// SetSvModelPrice return a closure function for condition on the field.
func SetSvModelPrice(price int64) SvModelCond {
	return func(o *SvModelConds) {
		o.Price = &price
	}
}

// SetSvModelBrand return a closure function for condition on the field.
func SetSvModelBrand(brand string) SvModelCond {
	return func(o *SvModelConds) {
		o.Brand = &brand
	}
}

// SetSvModelCreatedAt return a closure function for condition on the field.
func SetSvModelCreatedAt(createdAt int64) SvModelCond {
	return func(o *SvModelConds) {
		o.CreatedAt = &createdAt
	}
}

// SetSvModelUpdatedAt return a closure function for condition on the field.
func SetSvModelUpdatedAt(updatedAt int64) SvModelCond {
	return func(o *SvModelConds) {
		o.UpdatedAt = &updatedAt
	}
}

// SetSvModelDeletedAt return a closure function for condition on the field.
func SetSvModelDeletedAt(deletedAt int64) SvModelCond {
	return func(o *SvModelConds) {
		o.DeletedAt = &deletedAt
	}
}

func BuildSvModelConds(sqlCond *sqlbuilder.Cond, conds *SvModelConds) (args []string) {
	if sqlCond == nil || conds == nil {
		return
	}
	if conds.ID != nil {
		args = append(args, sqlCond.Equal("id", *conds.ID))
	}
	if conds.Name != nil {
		args = append(args, sqlCond.Equal("name", *conds.Name))
	}
	if conds.ThumbURL != nil {
		args = append(args, sqlCond.Equal("thumb_url", *conds.ThumbURL))
	}
	if conds.ModelURL != nil {
		args = append(args, sqlCond.Equal("model_url", *conds.ModelURL))
	}
	if conds.Price != nil {
		args = append(args, sqlCond.Equal("price", *conds.Price))
	}
	if conds.Brand != nil {
		args = append(args, sqlCond.Equal("brand", *conds.Brand))
	}
	if conds.CreatedAt != nil {
		args = append(args, sqlCond.Equal("created_at", *conds.CreatedAt))
	}
	if conds.UpdatedAt != nil {
		args = append(args, sqlCond.Equal("updated_at", *conds.UpdatedAt))
	}
	if conds.DeletedAt != nil {
		args = append(args, sqlCond.Equal("deleted_at", *conds.DeletedAt))
	}
	return args
}
