// Code generated by github.com/mohuishou/protoc-gen-go-gin. DO NOT EDIT.

package api

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	metadata "google.golang.org/grpc/metadata"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the mohuishou/protoc-gen-go-gin package it is being compiled against.
// context.http.metadata.
//gin.

type UserHTTPServer interface {
	Login(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
}

func RegisterUserHTTPServer(r gin.IRouter, srv UserHTTPServer) {
	s := User{
		server: srv,
		router: r,
		resp:   defaultUserResp{},
	}
	s.RegisterService()
}

type User struct {
	server UserHTTPServer
	router gin.IRouter
	resp   interface {
		Error(ctx *gin.Context, err error)
		ParamsError(ctx *gin.Context, err error)
		Success(ctx *gin.Context, data interface{})
	}
}

// Resp 返回值
type defaultUserResp struct{}

func (resp defaultUserResp) response(ctx *gin.Context, status, code int, msg string, data interface{}) {
	ctx.JSON(status, map[string]interface{}{
		"code": code,
		"msg":  msg,
		"data": data,
	})
}

type UserErrorWithCode interface {
	Code() int
}

// Error 返回错误信息
func (resp defaultUserResp) Error(ctx *gin.Context, err error) {
	var msg string
	if err != nil {
		msg = err.Error()
	} else {
		msg = "unknown error, err is nil"
	}

	_ = ctx.Error(err)
	if nerr, ok := err.(UserErrorWithCode); ok {
		resp.response(ctx, http.StatusOK, nerr.Code(), msg, nil)
	} else {
		resp.response(ctx, http.StatusOK, 1, msg, nil)
	}
}

// ParamsError 参数错误
func (resp defaultUserResp) ParamsError(ctx *gin.Context, err error) {
	_ = ctx.Error(err)
	resp.response(ctx, 200, 1, "params error, "+err.Error(), nil)
}

// Success 返回成功信息
func (resp defaultUserResp) Success(ctx *gin.Context, data interface{}) {
	resp.response(ctx, 200, 0, "success", data)
}

func (s *User) Login_0(ctx *gin.Context) {
	var in UserLoginRequest

	if err := ctx.ShouldBind(&in); err != nil {
		s.resp.ParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(UserHTTPServer).Login(newCtx, &in)
	if err != nil {
		s.resp.Error(ctx, err)
		return
	}

	s.resp.Success(ctx, out)
}

func (s *User) RegisterService() {

	s.router.Handle("POST", "/shellverse-service/user/login", s.Login_0)

}
